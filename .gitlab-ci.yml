stages:
  - check
  - docker-build
  - deploy

################ TEMPLATES

.docker: &docker
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

.deploy: &deploy
  image: $CI_IMAGE
  before_script:
    - mkdir -p $HOME/.kube
    - echo "$KUBECONFIG" > $HOME/.kube/config
  only:
    - master

# check stage

test-code:
  image: golang
  stage: check
  script:
    - go mod download
    - go test -v ./...

#test-format:
#  image: golang
#  stage: check
#  script:
#    - go mod download
#    - test -z "$(gofmt -l)"

test-lint:
  image: golangci/golangci-lint
  stage: check
  script:
    - go mod download
    - golangci-lint run

test-build-image:
  <<: *docker
  stage: check
  except:
    - master
    - tags
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" .

# build stage

build-docker-image:
  <<: *docker
  stage: docker-build
  script:
    - docker build --pull -t "$CI_REGISTRY_IMAGE" -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
      --label AUTHOR="${GITLAB_USER_NAME}"
      --label COMPONENT="${CI_PROJECT_NAME}"
      --label IMAGE_COMMIT_REFERENCE_NAME="${CI_COMMIT_REF_NAME}"
      --label IMAGE_COMMIT_SHA="${CI_COMMIT_SHA}"
      --label IMAGE_BUILD_DATE="$(date)"
      --label REPO_URL="${CI_PROJECT_URL}"
      .
    - docker push "$CI_REGISTRY_IMAGE"
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  only:
    - master

deploy-prod:
  <<: *deploy
  stage: deploy
  environment:
    name: prod
  script:
    - kubectl apply -f deploy/crds/apps.kubelix.io_services_crd.yaml
    - kubectl apply -f deploy/namespace.yml
    - kubectl apply -f deploy/role.yaml
    - kubectl apply -f deploy/service_account.yml
    - kubectl apply -f deploy/role_binding.yaml
    - kubectl apply -f deploy/operator.yml
